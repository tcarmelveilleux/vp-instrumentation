# VPI Test for Simics
#
# To create checkpoint:
#
#$uboot_elf = u-boot-1.3.0-vt-2009-02-02
#$memory_megs = 512
#$cpu_cores = 3
#add-directory "%script%"
#run-command-file "%simics%\\targets\\mpc8641-simple\\mpc8641-simple-u-boot.simics"
#
# Then run and save checkpoint at prompt.

# Read checkpoint
read-configuration "C:\\Users\\veilleux\\Desktop\\Schoolwork\\Maitrise\\AREXIMAS\\SOFTWARE-Xtratum\\xm-leon-release-2.2.2d\\Simics\\mpc8641hpcn-UBoot-1.3.0-3cores.ckpt"
#read-configuration "u-boot-loaded-for-rsw-test.ckpt"

# Load test binary
add-directory "C:\\xtratum\\workspace\\VPI-test\\Release"
add-directory "C:\\Users\\veilleux\\Desktop\\Schoolwork\\Maitrise\\AREXIMAS\\(THESIS) Debugging"
@import sys
@sys.path.append("C:\\Users\\veilleux\\Desktop\\Schoolwork\\Maitrise\\AREXIMAS\\(THESIS) Debugging")

load-binary "VPI-test"

# Load symbols from test binary
new-symtable symtable
symtable.load-symbols "VPI-test"

# Close graphics console
con0.close

# Setup context
enable-reverse-execution

new-context cpu0_context
cpu0_context->symtable = symtable
cpu0.set-context cpu0_context

# Use magic breakpoints
enable-magic-breakpoint

# Start GDB debuggers
new-gdb-remote "gdb-cpu0" 9123 cpu0

run-python-file filename = setup-VPI-test-haps.py

# Start binary by issuing GO command at U-Boot prompt
script-branch {
   cpu0.wait-for-cycle 10 -relative
   con1.input "go 40000 -debug\n"
}
